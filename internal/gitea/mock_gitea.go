// Code generated by MockGen. DO NOT EDIT.
// Source: gitea.go

// Package gitea is a generated GoMock package.
package gitea

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// CloneRepository mocks base method.
func (m *MockClientInterface) CloneRepository(upstreamURL, repoRef, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneRepository", upstreamURL, repoRef, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneRepository indicates an expected call of CloneRepository.
func (mr *MockClientInterfaceMockRecorder) CloneRepository(upstreamURL, repoRef, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneRepository", reflect.TypeOf((*MockClientInterface)(nil).CloneRepository), upstreamURL, repoRef, username, password)
}

// Connect mocks base method.
func (m *MockClientInterface) Connect(url, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", url, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockClientInterfaceMockRecorder) Connect(url, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockClientInterface)(nil).Connect), url, username, password)
}

// CreateUser mocks base method.
func (m *MockClientInterface) CreateUser(username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockClientInterfaceMockRecorder) CreateUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClientInterface)(nil).CreateUser), username, password)
}

// GetClonedRepositoryURLFor mocks base method.
func (m *MockClientInterface) GetClonedRepositoryURLFor(upstreamURL, revision string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClonedRepositoryURLFor", upstreamURL, revision)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClonedRepositoryURLFor indicates an expected call of GetClonedRepositoryURLFor.
func (mr *MockClientInterfaceMockRecorder) GetClonedRepositoryURLFor(upstreamURL, revision interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClonedRepositoryURLFor", reflect.TypeOf((*MockClientInterface)(nil).GetClonedRepositoryURLFor), upstreamURL, revision)
}

// HasDefaultUser mocks base method.
func (m *MockClientInterface) HasDefaultUser() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDefaultUser")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasDefaultUser indicates an expected call of HasDefaultUser.
func (mr *MockClientInterfaceMockRecorder) HasDefaultUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDefaultUser", reflect.TypeOf((*MockClientInterface)(nil).HasDefaultUser))
}
